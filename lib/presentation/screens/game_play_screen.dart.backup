import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'dart:async';
import '../../core/themes/app_theme.dart';
import '../../core/constants/enums.dart';
import '../../core/utils/routes.dart';
import '../../data/models/game_session.dart';
import '../../data/models/player.dart';
import '../../data/repositories/game_service.dart';
import '../widgets/buttons/primary_button.dart';

class GamePlayScreen extends StatefulWidget {
  final GameSession gameSession;

  const GamePlayScreen({
    super.key,
    required this.gameSession,
  });

  @override
  State<GamePlayScreen> createState() => _GamePlayScreenState();
}

class _GamePlayScreenState extends State<GamePlayScreen>
    with TickerProviderStateMixin {
  late GameSession _currentSession;
  Timer? _phaseTimer;
  int _remainingSeconds = 0;
  bool _isTimerRunning = false;
  bool _isTimerPaused = false;

  late AnimationController _phaseTransitionController;
  late AnimationController _timerController;
  late Animation<double> _phaseTransitionAnimation;
  late Animation<Color?> _timerColorAnimation;

  final List<String> _phaseHistory = [];
  int _currentPlayerTurn = 0;
  int _descriptionTimePerPlayer = 30; // seconds per player

  @override
  void initState() {
    super.initState();
    _currentSession = widget.gameSession;
    _setupAnimations();
    _initializePhase();
    _addToHistory('Game started in ${_getPhaseDisplayName(
        _currentSession.currentPhase)} phase');
  }

  @override
  void dispose() {
    _phaseTimer?.cancel();
    _phaseTransitionController.dispose();
    _timerController.dispose();
    super.dispose();
  }

  void _setupAnimations() {
    _phaseTransitionController = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    );

    _timerController = AnimationController(
      duration: const Duration(milliseconds: 300),
      vsync: this,
    );

    _phaseTransitionAnimation = CurvedAnimation(
      parent: _phaseTransitionController,
      curve: Curves.easeInOut,
    );

    _timerColorAnimation = ColorTween(
      begin: Colors.green,
      end: Colors.red,
    ).animate(_timerController);
  }

  void _initializePhase() {
    switch (_currentSession.currentPhase) {
      case GamePhase.description:
        _startDescriptionPhase();
        break;
      case GamePhase.discussion:
        _startDiscussionPhase();
        break;
      default:
        break;
    }
  }

  void _startDescriptionPhase() {
    _currentPlayerTurn = 0;
    _descriptionTimePerPlayer =
    _currentSession.settings.descriptionTimeLimit > 0
        ? _currentSession.settings.descriptionTimeLimit
        : 0; // 0 means no timer
    _remainingSeconds = _descriptionTimePerPlayer;
    _addToHistory(
        'Description phase started - ${_getCurrentPlayer().name}\'s turn');

    if (_descriptionTimePerPlayer > 0) {
      _startTimer();
    }
  }

  void _startDiscussionPhase() {
    _addToHistory('Discussion phase started - players can now discuss freely');
  }

  void _startTimer() {
    _isTimerRunning = true;
    _isTimerPaused = false;
    _timerController.forward();

    _phaseTimer = Timer.periodic(const Duration(seconds: 1), (timer) {
      if (!_isTimerPaused && _remainingSeconds > 0) {
        setState(() {
          _remainingSeconds--;
        });

        double progress = 1.0 - (_remainingSeconds / _descriptionTimePerPlayer);
        _timerController.value = progress;

        if (_remainingSeconds == 10 || _remainingSeconds == 5) {
          HapticFeedback.mediumImpact();
        }

        if (_remainingSeconds == 0) {
          _onTimerExpired();
        }
      }
    });
  }

  void _pauseTimer() {
    setState(() {
      _isTimerPaused = true;
    });
    _addToHistory('Timer paused by game master');
  }

  void _resumeTimer() {
    setState(() {
      _isTimerPaused = false;
    });
    _addToHistory('Timer resumed by game master');
  }

  void _onTimerExpired() {
    if (_currentSession.currentPhase == GamePhase.description) {
      _phaseTimer?.cancel();
      setState(() {
        _isTimerRunning = false;
      });

      HapticFeedback.heavyImpact();
      _addToHistory('${_getCurrentPlayer().name}\'s time expired');

      _showTimeExpiredDialog();
    } else {
      _phaseTimer?.cancel();
      setState(() {
        _isTimerRunning = false;
      });

      HapticFeedback.heavyImpact();
      _addToHistory('Phase timer expired');

      _showPhaseCompleteDialog();
    }
  }

  void _addToHistory(String event) {
    final timestamp = DateTime.now();
    final timeString = '${timestamp.hour.toString().padLeft(2, '0')}:${timestamp
        .minute.toString().padLeft(2, '0')}';
    _phaseHistory.add('[$timeString] $event');
  }

  Player _getCurrentPlayer() {
    final activePlayers = _currentSession.activePlayers;
    return activePlayers[_currentPlayerTurn % activePlayers.length];
  }

  void _nextPlayerTurn() {
    final activePlayers = _currentSession.activePlayers;

    if (_currentPlayerTurn < activePlayers.length - 1) {
      setState(() {
        _currentPlayerTurn++;
        _remainingSeconds = _descriptionTimePerPlayer;
      });

      _timerController.reset();
      _addToHistory('${_getCurrentPlayer().name}\'s turn to describe');

      HapticFeedback.mediumImpact();

      // Show next player dialog
      _showNextPlayerDialog();
    } else {
      // All players have had their turn
      _phaseTimer?.cancel();
      setState(() {
        _isTimerRunning = false;
      });

      HapticFeedback.heavyImpact();
      _addToHistory('All players completed description phase');

      _showPhaseCompleteDialog();
    }
  }

  void _continueToNextPlayer() {
    if (_descriptionTimePerPlayer > 0) {
      _startTimer();
    }
  }

  void _skipCurrentTurn() {
    // Stop the timer if it's running
    if (_isTimerRunning) {
      _phaseTimer?.cancel();
      setState(() {
        _isTimerRunning = false;
      });
    }

    _addToHistory('${_getCurrentPlayer().name}\'s turn skipped');
    _nextPlayerTurn();
  }

  String _getPhaseDisplayName(GamePhase phase) {
    switch (phase) {
      case GamePhase.description:
        return 'Description';
      case GamePhase.discussion:
        return 'Discussion';
      case GamePhase.voting:
        return 'Voting';
      default:
        return phase.name;
    }
  }

  Color _getPhaseColor(GamePhase phase) {
    switch (phase) {
      case GamePhase.description:
        return Colors.blue;
      case GamePhase.discussion:
        return Colors.green;
      case GamePhase.voting:
        return Colors.orange;
      default:
        return AppColors.primary;
    }
  }

  void _startDiscussion() {
    _transitionToPhase(GamePhase.discussion);
  }

  void _callForVote() {
    _transitionToPhase(GamePhase.voting);
  }

  void _transitionToPhase(GamePhase newPhase) {
    _phaseTransitionController.forward().then((_) {
      setState(() {
        _currentSession = _currentSession.copyWith(currentPhase: newPhase);
        _phaseTimer?.cancel();
        _isTimerRunning = false;
        _remainingSeconds = 0;
        _timerController.reset();
      });

      final gameService = GameService.instance;
      gameService.nextPhase(newPhase);

      _addToHistory('Transitioned to ${_getPhaseDisplayName(newPhase)} phase');

      if (newPhase == GamePhase.voting) {
        _navigateToVoting();
      } else {
        _initializePhase();
      }

      _phaseTransitionController.reset();
    });
  }

  void _navigateToVoting() {
    Navigator.of(context).pushReplacementNamed(
      Routes.voting,
      arguments: _currentSession,
    );
  }

  void _showPhaseCompleteDialog() {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) =>
          AlertDialog(
            title: Text('${_getPhaseDisplayName(
                _currentSession.currentPhase)} Complete'),
            content: Text(
                _currentSession.currentPhase == GamePhase.description
                    ? 'All players have described their words! Ready to start the discussion phase?'
                    : 'Phase completed. What would you like to do next?'
            ),
            actions: [
              if (_currentSession.currentPhase == GamePhase.description) ...[
                TextButton(
                  onPressed: () {
                    Navigator.of(context).pop();
                    _startDiscussion();
                  },
                  child: const Text('Start Discussion'),
                ),
              ] else
                ...[
                  TextButton(
                    onPressed: () {
                      Navigator.of(context).pop();
                    },
                    child: const Text('Continue'),
                  ),
                ],
            ],
          ),
    );
  }

  void _showNextPlayerDialog() {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) =>
          AlertDialog(
            title: const Text('Next Player\'s Turn'),
            content: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                Text('Hand the phone to:'),
                const SizedBox(height: 12),
                Container(
                  padding: const EdgeInsets.symmetric(
                      horizontal: 20, vertical: 12),
                  decoration: BoxDecoration(
                    color: Theme
                        .of(context)
                        .primaryColor
                        .withOpacity(0.1),
                    borderRadius: BorderRadius.circular(12),
                    border: Border.all(
                      color: Theme
                          .of(context)
                          .primaryColor,
                    ),
                  ),
                  child: Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      Text(
                        _getCurrentPlayer().avatarIndex,
                        style: const TextStyle(fontSize: 20),
                      ),
                      const SizedBox(width: 12),
                      Text(
                        _getCurrentPlayer().name,
                        style: Theme
                            .of(context)
                            .textTheme
                            .titleLarge
                            ?.copyWith(
                          fontWeight: FontWeight.bold,
                          color: Theme
                              .of(context)
                              .primaryColor,
                        ),
                      ),
                    ],
                  ),
                ),
                const SizedBox(height: 12),
                Text(
                  'It\'s their turn to describe their word.',
                  style: Theme
                      .of(context)
                      .textTheme
                      .bodyMedium,
                  textAlign: TextAlign.center,
                ),
              ],
            ),
            actions: [
              TextButton(
                onPressed: () {
                  Navigator.of(context).pop();
                  _continueToNextPlayer();
                },
                child: const Text('Start Turn'),
              ),
            ],
          ),
    );
  }

  void _showTimeExpiredDialog() {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) =>
          AlertDialog(
            title: const Text('Time\'s Up!'),
            content: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                Icon(
                  Icons.timer_off,
                  size: 48,
                  color: Colors.orange.shade600,
                ),
                const SizedBox(height: 16),
                Text(
                  '${_getCurrentPlayer().name}\'s time has expired.',
                  style: Theme
                      .of(context)
                      .textTheme
                      .titleMedium,
                  textAlign: TextAlign.center,
                ),
                const SizedBox(height: 8),
                Text(
                  'Ready to continue to the next player?',
                  style: Theme
                      .of(context)
                      .textTheme
                      .bodyMedium,
                  textAlign: TextAlign.center,
                ),
              ],
            ),
            actions: [
              TextButton(
                onPressed: () {
                  Navigator.of(context).pop();
                  _nextPlayerTurn();
                },
                child: const Text('Next Player'),
              ),
            ],
          ),
    );
  }

  void _showPhaseHistoryDialog() {
    showDialog(
      context: context,
      builder: (context) =>
          AlertDialog(
            title: const Text('Phase History'),
            content: SizedBox(
              width: double.maxFinite,
              height: 300,
              child: ListView.builder(
                itemCount: _phaseHistory.length,
                itemBuilder: (context, index) {
                  return Padding(
                    padding: const EdgeInsets.symmetric(vertical: 4),
                    child: Text(
                      _phaseHistory[index],
                      style: Theme
                          .of(context)
                          .textTheme
                          .bodySmall,
                    ),
                  );
                },
              ),
            ),
            actions: [
              TextButton(
                onPressed: () => Navigator.of(context).pop(),
                child: const Text('Close'),
              ),
            ],
          ),
    );
  }

  Widget _buildPhaseHeader() {
    return AnimatedBuilder(
      animation: _phaseTransitionAnimation,
      builder: (context, child) {
        return Container(
          padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 24),
          decoration: BoxDecoration(
            color: _getPhaseColor(_currentSession.currentPhase).withOpacity(
                0.1),
            borderRadius: BorderRadius.circular(16),
            border: Border.all(
              color: _getPhaseColor(_currentSession.currentPhase),
              width: 2,
            ),
          ),
          child: Column(
            children: [
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        _currentSession.currentPhase == GamePhase.description
                            ? 'Current Turn'
                            : 'Current Phase',
                        style: Theme
                            .of(context)
                            .textTheme
                            .bodySmall
                            ?.copyWith(
                          color: Colors.grey.shade600,
                        ),
                      ),
                      if (_currentSession.currentPhase ==
                          GamePhase.description) ...[
                        Row(
                          children: [
                            Text(
                              _getCurrentPlayer().avatarIndex,
                              style: const TextStyle(
                                fontSize: 18,
                              ),
                            ),
                            const SizedBox(width: 8),
                            Text(
                              _getCurrentPlayer().name,
                              style: Theme
                                  .of(context)
                                  .textTheme
                                  .headlineSmall
                                  ?.copyWith(
                                color: _getPhaseColor(
                                    _currentSession.currentPhase),
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ],
                        ),
                        Text(
                          'Player ${_currentPlayerTurn + 1} of ${_currentSession
                              .activePlayers.length}',
                          style: Theme
                              .of(context)
                              .textTheme
                              .bodySmall
                              ?.copyWith(
                            color: Colors.grey.shade600,
                          ),
                        ),
                      ] else
                        ...[
                          Text(
                            _getPhaseDisplayName(_currentSession.currentPhase),
                            style: Theme
                                .of(context)
                                .textTheme
                                .headlineSmall
                                ?.copyWith(
                              color: _getPhaseColor(
                                  _currentSession.currentPhase),
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ],
                    ],
                  ),
                  Row(
                    children: [
                      if (_currentSession.currentPhase ==
                          GamePhase.description) ...[
                        IconButton(
                          onPressed: _skipCurrentTurn,
                          icon: const Icon(Icons.skip_next),
                          tooltip: 'Skip Turn',
                          color: _getPhaseColor(_currentSession.currentPhase),
                        ),
                      ],
                      IconButton(
                        onPressed: _showPhaseHistoryDialog,
                        icon: Icon(
                          Icons.history,
                          color: _getPhaseColor(_currentSession.currentPhase),
                        ),
                        tooltip: 'Phase History',
                      ),
                    ],
                  ),
                ],
              ),
              if (_descriptionTimePerPlayer > 0 && _isTimerRunning) ...[
                const SizedBox(height: 16),
                _buildTimer(),
              ],
            ],
          ),
        );
      },
    );
  }

  Widget _buildPhaseInfoCard() {
    if (_currentSession.currentPhase == GamePhase.description) {
      return Card(
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            children: [
              Icon(
                Icons.description,
                size: 48,
                color: Colors.blue.shade600,
              ),
              const SizedBox(height: 12),
              Text(
                'Description Phase',
                style: Theme
                    .of(context)
                    .textTheme
                    .titleLarge
                    ?.copyWith(
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: 8),
              Text(
                'Each player will describe their word without being too obvious.',
                textAlign: TextAlign.center,
                style: Theme
                    .of(context)
                    .textTheme
                    .bodyMedium,
              ),
              const SizedBox(height: 16),
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.blue.shade50,
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.blue.shade200),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'Description Tips',
                      style: Theme
                          .of(context)
                          .textTheme
                          .titleMedium
                          ?.copyWith(
                        fontWeight: FontWeight.bold,
                        color: Colors.blue.shade700,
                      ),
                    ),
                    const SizedBox(height: 8),
                    Text(
                      '• Be vague but not too cryptic\n• Don\'t directly mention your word\n• Try to relate your word to common concepts\n• Keep descriptions short and simple',
                      style: Theme
                          .of(context)
                          .textTheme
                          .bodySmall,
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      );
    } else if (_currentSession.currentPhase == GamePhase.discussion) {
      return Card(
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            children: [
              Icon(
                Icons.forum,
                size: 48,
                color: Colors.green.shade600,
              ),
              const SizedBox(height: 12),
              Text(
                'Discussion Phase',
                style: Theme
                    .of(context)
                    .textTheme
                    .titleLarge
                    ?.copyWith(
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: 8),
              Text(
                'Discuss each player\'s descriptions to identify the undercover agents.',
                textAlign: TextAlign.center,
                style: Theme
                    .of(context)
                    .textTheme
                    .bodyMedium,
              ),
              const SizedBox(height: 16),
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.green.shade50,
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.green.shade200),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'Discussion Tips',
                      style: Theme
                          .of(context)
                          .textTheme
                          .titleMedium
                          ?.copyWith(
                        fontWeight: FontWeight.bold,
                        color: Colors.green.shade700,
                      ),
                    ),
                    const SizedBox(height: 8),
                    Text(
                      '• Ask each player about their word description\n• Look for inconsistencies in stories\n• Pay attention to who seems uncertain\n• Civilian words are related but different\n• Undercover words are similar but not the same',
                      style: Theme
                          .of(context)
                          .textTheme
                          .bodySmall,
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      );
    }

    return const SizedBox.shrink();
  }

  Widget _buildTimer() {
    final minutes = _remainingSeconds ~/ 60;
    final seconds = _remainingSeconds % 60;
    final timeString = '${minutes.toString().padLeft(2, '0')}:${seconds
        .toString().padLeft(2, '0')}';

    return AnimatedBuilder(
      animation: _timerColorAnimation,
      builder: (context, child) {
        return Column(
          children: [
            LinearProgressIndicator(
              value: 1.0 - (_remainingSeconds / _descriptionTimePerPlayer),
              backgroundColor: Colors.grey.shade300,
              valueColor: AlwaysStoppedAnimation<Color>(
                _timerColorAnimation.value ?? Colors.green,
              ),
            ),
            const SizedBox(height: 8),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(
                  timeString,
                  style: Theme
                      .of(context)
                      .textTheme
                      .headlineMedium
                      ?.copyWith(
                    color: _timerColorAnimation.value,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                Row(
                  children: [
                    if (_isTimerRunning) ...[
                      IconButton(
                        onPressed: _isTimerPaused ? _resumeTimer : _pauseTimer,
                        icon: Icon(
                          _isTimerPaused ? Icons.play_arrow : Icons.pause,
                          color: _timerColorAnimation.value,
                        ),
                        tooltip: _isTimerPaused ? 'Resume' : 'Pause',
                      ),
                    ],
                  ],
                ),
              ],
            ),
            if (_isTimerPaused)
              Container(
                padding: const EdgeInsets.symmetric(
                    horizontal: 12, vertical: 4),
                decoration: BoxDecoration(
                  color: Colors.orange.withOpacity(0.2),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Text(
                  'PAUSED',
                  style: TextStyle(
                    color: Colors.orange.shade700,
                    fontWeight: FontWeight.bold,
                    fontSize: 12,
                  ),
                ),
              ),
          ],
        );
      },
    );
  }

  Widget _buildPlayerList() {
    // Only show player list in non-description phases
    if (_currentSession.currentPhase == GamePhase.description) {
      return const SizedBox.shrink();
    }

    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Players (${_currentSession.activePlayers.length})',
              style: Theme
                  .of(context)
                  .textTheme
                  .titleMedium
                  ?.copyWith(
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 12),
            Wrap(
              spacing: 8,
              runSpacing: 8,
              children: _currentSession.players.map((player) {
                final isActive = !player.isEliminated;
                return Container(
                  padding: const EdgeInsets.symmetric(
                      horizontal: 12, vertical: 8),
                  decoration: BoxDecoration(
                    color: isActive
                        ? Theme
                        .of(context)
                        .primaryColor
                        .withOpacity(0.1)
                        : Colors.grey.withOpacity(0.3),
                    borderRadius: BorderRadius.circular(20),
                    border: Border.all(
                      color: isActive
                          ? Theme
                          .of(context)
                          .primaryColor
                          : Colors.grey,
                    ),
                  ),
                  child: Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      Opacity(
                        opacity: isActive ? 1.0 : 0.5,
                        child: Text(
                          player.avatarIndex,
                          style: const TextStyle(
                            fontSize: 16,
                          ),
                        ),
                      ),
                      const SizedBox(width: 8),
                      Text(
                        player.name,
                        style: TextStyle(
                          fontWeight: FontWeight.w600,
                          color: isActive
                              ? Theme
                              .of(context)
                              .primaryColor
                              : Colors.grey,
                          decoration: isActive
                              ? null
                              : TextDecoration.lineThrough,
                        ),
                      ),
                    ],
                  ),
                );
              }).toList(),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildPhaseControls() {
    return Column(
      children: [
        if (_currentSession.currentPhase == GamePhase.description &&
            _descriptionTimePerPlayer > 0) ...[
          PrimaryButton(
            text: 'Start Discussion',
            onPressed: _startDiscussion,
          ),
          const SizedBox(height: 12),
        ],
        if (_currentSession.currentPhase == GamePhase.discussion) ...[
          PrimaryButton(
            text: 'Call for Vote',
            onPressed: _callForVote,
          ),
          const SizedBox(height: 12),
        ],
        PrimaryButton(
          text: 'Game Master Override',
          onPressed: _showGameMasterDialog,
        ),
      ],
    );
  }

  void _showGameMasterDialog() {
    showDialog(
      context: context,
      builder: (context) =>
          AlertDialog(
            title: const Text('Game Master Controls'),
            content: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                ListTile(
                  leading: const Icon(Icons.skip_next),
                  title: const Text('Skip Phase'),
                  onTap: () {
                    Navigator.of(context).pop();
                    _showPhaseCompleteDialog();
                  },
                ),
                if (_currentSession.currentPhase == GamePhase.description)
                  ListTile(
                    leading: const Icon(Icons.forum),
                    title: const Text('Force Discussion'),
                    onTap: () {
                      Navigator.of(context).pop();
                      _startDiscussion();
                    },
                  ),
                ListTile(
                  leading: const Icon(Icons.how_to_vote),
                  title: const Text('Force Voting'),
                  onTap: () {
                    Navigator.of(context).pop();
                    _callForVote();
                  },
                ),
                ListTile(
                  leading: const Icon(Icons.history),
                  title: const Text('View History'),
                  onTap: () {
                    Navigator.of(context).pop();
                    _showPhaseHistoryDialog();
                  },
                ),
              ],
            ),
            actions: [
              TextButton(
                onPressed: () => Navigator.of(context).pop(),
                child: const Text('Cancel'),
              ),
            ],
          ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        appBar: AppBar(
          title: const Text('Undercover Game'),
          automaticallyImplyLeading: false,
          backgroundColor: Colors.transparent,
          elevation: 0,
          actions: [
            IconButton(
              onPressed: () {
                Navigator.of(context).popUntil((route) => route.isFirst);
              },
              icon: const Icon(Icons.home),
              tooltip: 'Home',
            ),
          ],
        ),
        body: SafeArea(
            child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                    children: [
                      _buildPhaseHeader(),
                      const SizedBox(height: 16),
                      Expanded(
                        child: SingleChildScrollView(
                          child: Column(
                            children: [
                              _buildPlayerList(),
                              const SizedBox(height: 16),
                              Expanded(
                                child: SingleChildScrollView(
                                  child: Column(
                                    children: [
                                      _buildPhaseInfoCard(),
                                      const SizedBox(height: 16),
                                      _buildPlayerList(),
                                      const SizedBox(height: 16),
                                      if (_currentSession.currentPhase ==
                                          GamePhase.description)
                                        Card(
                                          child: Padding(
                                            padding: const EdgeInsets.all(16),
                                            child: Column(
                                              children: [
                                                Icon(
                                                  Icons.description,
                                                  size: 48,
                                                  color: Colors.blue.shade600,
                                                ),
                                                const SizedBox(height: 8),
                                                Text(
                                                  'It\'s \${_getCurrentPlayer().name}\'s turn to describe their word briefly without being too obvious.',
                                                  textAlign: TextAlign.center,
                                                  style: Theme
                                                      .of(context)
                                                      .textTheme
                                                      .bodyMedium,
                                                ),
                                                const SizedBox(height: 12),
                                                if (_descriptionTimePerPlayer >
                                                    0) ...[
                                                  Container(
                                                    padding: const EdgeInsets
                                                        .symmetric(
                                                        horizontal: 12,
                                                        vertical: 8),
                                                    decoration: BoxDecoration(
                                                      color: Colors.blue
                                                          .shade50,
                                                      borderRadius: BorderRadius
                                                          .circular(8),
                                                      border: Border.all(
                                                          color: Colors.blue
                                                              .shade200),
                                                    ),
                                                    child: Text(
                                                      'Time per player: \${_descriptionTimePerPlayer}s',
                                                      style: Theme
                                                          .of(context)
                                                          .textTheme
                                                          .bodySmall
                                                          ?.copyWith(
                                                        color: Colors.blue
                                                            .shade700,
                                                        fontWeight: FontWeight
                                                            .w500,
                                                      ),
                                                    ),
                                                  ),
                                                ] else
                                                  ...[
                                                    Container(
                                                      padding: const EdgeInsets
                                                          .symmetric(
                                                          horizontal: 12,
                                                          vertical: 8),
                                                      decoration: BoxDecoration(
                                                        color: Colors.grey
                                                            .shade50,
                                                        borderRadius: BorderRadius
                                                            .circular(8),
                                                        border: Border.all(
                                                            color: Colors.grey
                                                                .shade300),
                                                      ),
                                                      child: Row(
                                                        mainAxisSize: MainAxisSize
                                                            .min,
                                                        children: [
                                                          Icon(
                                                            Icons.timer_off,
                                                            size: 16,
                                                            color: Colors.grey
                                                                .shade600,
                                                          ),
                                                          const SizedBox(
                                                              width: 6),
                                                          Text(
                                                            'No timer - take your time',
                                                            style: Theme
                                                                .of(context)
                                                                .textTheme
                                                                .bodySmall
                                                                ?.copyWith(
                                                              color: Colors.grey
                                                                  .shade700,
                                                              fontWeight: FontWeight
                                                                  .w500,
                                                            ),
                                                          ),
                                                        ],
                                                      ),
                                                    ),
                                                  ],
                                                if (_descriptionTimePerPlayer ==
                                                    0) ...[
                                                  const SizedBox(height: 16),
                                                  SizedBox(
                                                    width: double.infinity,
                                                    child: PrimaryButton(
                                                      text: 'Done - Next Player',
                                                      onPressed: _skipCurrentTurn,
                                                    ),
                                                  ),
                                                ],
                                              ],
                                            ),
                                          ),
                                        ),
                                      if (_currentSession.currentPhase ==
                                          GamePhase.discussion)
                                        Card(
                                          child: Padding(
                                            padding: const EdgeInsets.all(16),
                                            child: Column(
                                              children: [
                                                Icon(
                                                  Icons.forum,
                                                  size: 48,
                                                  color: Colors.green.shade600,
                                                ),
                                                const SizedBox(height: 12),
                                                Text(
                                                  'Discussion Phase',
                                                  style: Theme
                                                      .of(context)
                                                      .textTheme
                                                      .titleLarge
                                                      ?.copyWith(
                                                    fontWeight: FontWeight.bold,
                                                  ),
                                                ),
                                                const SizedBox(height: 8),
                                                Text(
                                                  'Now discuss freely! Ask questions, share thoughts, and try to identify the undercover agents.',
                                                  textAlign: TextAlign.center,
                                                  style: Theme
                                                      .of(context)
                                                      .textTheme
                                                      .bodyMedium,
                                                ),
                                                const SizedBox(height: 16),
                                                Container(
                                                  padding: const EdgeInsets.all(
                                                      12),
                                                  decoration: BoxDecoration(
                                                    color: Colors.green.shade50,
                                                    borderRadius: BorderRadius
                                                        .circular(8),
                                                    border: Border.all(
                                                        color: Colors.green
                                                            .shade200),
                                                  ),
                                                  child: Column(
                                                    crossAxisAlignment: CrossAxisAlignment
                                                        .start,
                                                    children: [
                                                      Text(
                                                        'Discussion Tips',
                                                        style: Theme
                                                            .of(context)
                                                            .textTheme
                                                            .titleMedium
                                                            ?.copyWith(
                                                          fontWeight: FontWeight
                                                              .bold,
                                                          color: Colors.green
                                                              .shade700,
                                                        ),
                                                      ),
                                                      const SizedBox(height: 8),
                                                      Text(
                                                        '• Ask each player about their word description\n• Look for inconsistencies in stories\n• Pay attention to who seems uncertain\n• Civilian words are related but different\n• Undercover words are similar but not the same',
                                                        style: Theme
                                                            .of(context)
                                                            .textTheme
                                                            .bodySmall,
                                                      ),
                                                    ],
                                                  ),
                                                ),
                                              ],
                                            ),
                                          ),
                                        ),
                                    ],
                                  ),
                                ),
                              ),
                              const SizedBox(height: 16),
                              _buildPhaseControls(),
                            ],
                          ),
                        ),
                      ),
                    ]
                )
            )
        )
    );
  }
}